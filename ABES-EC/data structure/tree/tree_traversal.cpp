#include "t.h"
int main() {
  struct node *root = NULL;
  root = makenode(1);
  root->left = makenode(2);
  root->right = makenode(3);
  root->right->left = makenode(6);
  root->right->right = makenode(7);
  root->left->left = makenode(4);
  root->left->right = makenode(5);
  // int x;
  // cout<<"enter root node data ";
  // cin>>x;
  // root=makenode(x);
  // create_tree(&root);
  cout << "preord_traversal: ";
  preord_traversal(root);
  cout << endl;
  cout << "postord_traversal: ";
  postord_traversal(root);
  cout << endl;
  cout << "inord_traversal: ";
  inord_traversal(root);
  cout << endl;
  cout << "level order traversal: ";
  level_order_traversal(root);
  cout << endl;
  cout << "hash table is: \n";
  create_hash_table_lr(root);
  display_ht();
  cout << "the left view traversal is: ";
  left_view_traversal(root);
  cout << endl;
  cout << "the right view traversal is: ";
  right_view_traversal(root);
  cout << endl;
  cout<<"the level order traversal using hash table: ";
  level_order_traversal_ht(root);
  cout << endl;
  cout << "no. of nodes in the tree is:  " << node_count(root) << endl;
  cout << "no. of leaf node in the tree is:  " << count_leaf(root) << endl;
  cout << "no. of n1 node in the tree is:  " << count_n1node(root) << endl;
  cout << "no. of n2 node in the tree is:  " << count_n2node(root) << endl;
  cout << "height of the tree:  " << height_tree(root) << endl;
  cout << "to check the tree is strict or not:  " << strictly(root) << endl;
  cout << "to check the tree is complete or not:  " << complete(root) << endl;
  cout << "to find the sum of nodes:  " << sum_of_nodes(root) << endl;
  return 0;
}